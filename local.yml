- hosts: localhost

  pre_tasks:
    - name: Retrieve script absolute path
      tags:
        - always
      stat: 
        path: "~/workspace/scripts"
      register: absolute_path

    - name: Create devtools directory
      tags:
        - always
      file:
        path: "~/dev"
        state: directory

    - name: Retrieve dev absolute path
      tags:
        - always
      stat:
        path: "~/dev"
      register: dev_abs_path

    - name: print directory
      debug: msg="directory {{ absolute_path.stat }}."

    - name: retrieve uname kernel name
      tags:
        - always
      shell: uname -s
      register: uname_s

    - name: retrieve uname machine
      tags:
        - always
      shell: uname -m
      register: uname_m

    - name: retrieve Linux version codename
      tags:
        - always
      shell: lsb_release -cs
      register: lsb_release

    - name: print uname
      tags:
        - always
      debug: msg="uname -s={{ uname_s }} -a={{ uname_m }} // lsb_release={{ lsb_release }}"

  vars:
    script_dir: "{{ absolute_path.stat.path }}"
    dev_dir: "{{ dev_abs_path.stat.path }}"
    golang_version: "1.20.5"
    teleport_version: "14.1.1"

  tasks:

    - name: Install Ansible XML Parser
      become: yes
      shell: ansible-galaxy install cmprescott.xml

    - name: Remove Cowsay
      become: yes
      apt:
        name: cowsay
        state: absent

    - name: Prepare XSessionRc File
      lineinfile:
        dest: ~/.xsessionrc
        create: yes
        line: "#!/bin/sh"
        insertbefore: BOF
        state: present

    - name: Create user bin directory
      file:
        path: ~/bin
        state: directory

    - name: Install Gnome-settings-daemon
      become: yes
      apt:
        name: gnome-settings-daemon
        state: present

    - name: Install Git
      become: yes
      apt:
        name: ['git', 'gitk']
        state: present

    - name: Create Workspace directory
      file: 
        path: "{{ script_dir }}"
        state: directory

    - name: Clone my dotfiles Git Repo
      git:
        repo: https://github.com/aromanet42/scripts.git
        dest: "{{ script_dir }}"
        update: no

    - name: Sym link to gitconfig
      file:
        src: "{{ script_dir }}/.gitconfig"
        dest: ~/.gitconfig
        state: link

    - name: Create GitConfig directory
      file:
        path: ~/.config/git
        state: directory

    - name: Sym link to Git ignore
      file:
        src: "{{ script_dir }}/gitIgnore"
        dest: ~/.config/git/ignore
        state: link

    - name: Sym link to Git template files
      file:
        src: "{{ script_dir }}/git-templates"
        dest: ~/.git-templates
        state: link

    - name: Install Vim
      become: yes
      apt:
        name: ['vim', 'vim-gtk']
        state: present

    - name: Create Vim config directory
      file:
        path: ~/.vim
        state: directory

    - name: Sym link to Vim conf
      file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
      with_items:
        - { src: "{{ script_dir }}/.vimrc", dest: '~/.vimrc' }
        - { src: "{{ script_dir }}/Vim/plugin", dest: '~/.vim/plugin' }
        - { src: "{{ script_dir }}/Vim/autoload", dest: '~/.vim/autoload' }

    - name: Create Vim plugin directory
      file: 
        path: ~/.vim/bundle
        state: directory

    - name: Retrieve Vim plugins
      git:
        repo: "https://github.com/{{ item.gituser }}/{{ item.gitrepo }}.git"
        dest: "~/.vim/bundle/{{ item.gitrepo }}"
      with_items:
        - { gituser: "tomtom", gitrepo: "tcomment_vim" }
        - { gituser: "vim-scripts", gitrepo: "csv.vim" }
    
    - name: Install Terminator
      become: yes
      apt:
        name: terminator
        state: present

    - name: Create Terminator config dir
      file:
        path: "~/.config/terminator"
        state: directory
        recurse: yes

    - name: Copy Terminator config
      file: 
        src: "{{ script_dir }}/terminator.config"
        dest: "~/.config/terminator/config"
        state: link

    - name: Add udev rule to launch autorandr when monitor is (un)plugged
      copy:
        dest: /etc/udev/rules.d/detect-monitor-change.rules
        content: 'ACTION=="change", SUBSYSTEM=="drm", RUN+="{{ script_dir }}/bin/auto-change-monitor.sh"'
      become: yes

    - name: Install ARandr
      become: yes
      apt: 
        name: arandr
        state: present

    - name: Install autorandr - Automatically select a display configuration based on connected devices
      become: yes
      pip:
        name: autorandr
        state: present

    - name: Add Apt-key for Chrome
      become: yes
      apt_key: 
        url: https://dl-ssl.google.com/linux/linux_signing_key.pub

    - name: Add Chrome Repo into sources list
      become: yes
      apt_repository:
        repo: "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"
        state: present
        update_cache: yes

    - name: Install Chrome
      tags:
        - chrome
      become: yes
      apt:
        name: google-chrome-stable
        state: latest

    - name: Install Httpie
      become: yes
      apt:
        name: httpie
        state: present

    - name: Retrieve last JQ download url
      tags:
        - jq
      uri:
        url: https://api.github.com/repos/stedolan/jq/releases/latest
        body_format: json
      register: jq_download_url

    - name: Download JQ
      tags: 
       - jq
      get_url:
        url: "{{ item.browser_download_url }}"
        dest: ~/bin/jq
        mode: 0755
        force: yes
      when: "{{ item.name == 'jq-linux64' }}"
      with_items: "{{ jq_download_url.json.assets }}"

    - name: Install ZSH
      become: yes
      apt:
        name: zsh
        state: present

    - name: Download Oh-My-Zsh
      git:
        repo: https://github.com/robbyrussell/oh-my-zsh.git
        dest: "~/.oh-my-zsh"
        update: no

    - name: Retrieve current username
      local_action: command whoami
      register: current_user

    - name: Change user shell to zsh
      user:
        name: "{{ current_user.stdout }}"
        shell: /bin/zsh
      become: yes

    - name: Create Oh-My-Zsh completion directory
      file: 
        path: ~/.oh-my-zsh/completions
        state: directory

    - name: Sym link to Oh-My-Zsh completions
      file: 
        src: "{{ script_dir }}/completions/{{ item }}"
        dest: "~/.oh-my-zsh/completions/{{ item }}"
        state: link
      with_lines: "find {{ script_dir }}/completions/* -printf '%f\n'"

    - name: Copy Zsh Config
      file: 
        src: "{{ script_dir }}/.zshrc"
        dest: "~/.zshrc"
        force: yes
        state: link

    - name: Copy Zsh themes
      file: 
        src: "{{ script_dir }}/ohmyzsh/{{ item }}"
        dest: "~/.oh-my-zsh/themes/{{ item }}"
        state: link
      with_lines: "find {{ script_dir }}/ohmyzsh/*.zsh-theme -printf '%f\n'"

    - name: Copy Zsh custom files
      file: 
        src: "{{ script_dir }}/ohmyzsh/{{ item }}"
        dest: "~/.oh-my-zsh/custom/{{ item }}"
        state: link
      with_lines: "find {{ script_dir }}/ohmyzsh/*.zsh -printf '%f\n'"

    - name: Install Oh-My-Zsh Syntax Highlighting plugin
      git:
        repo: git://github.com/zsh-users/zsh-syntax-highlighting.git
        dest: ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting

    - name: Create ZSH non versioned custom_env file
      tags:
        - zsh
      copy:
        dest: ~/.oh-my-zsh/custom/custom_env.zsh
        content: "# add your specific environment variables here\n# This file is not versioned"
        force: no

    - name: add bin directory to PATH
      tags:
        - zsh
      lineinfile:
        dest: ~/.oh-my-zsh/custom/custom_env.zsh
        line: "export PATH={{ script_dir }}/bin:$PATH"

    - name: Retrieve last peco download url
      tags:
        - peco
      uri:
        url: https://api.github.com/repos/peco/peco/releases/latest
        body_format: json
      register: peco_download_url

    - name: Download Peco
      tags: 
        - peco
      get_url:
        url: "{{ item.browser_download_url }}"
        dest: /tmp/peco.tar.gz
      when: "{{ item.name == 'peco_linux_amd64.tar.gz' }}"
      with_items: "{{ peco_download_url.json.assets }}"

    - name: Extract peco archive
      tags:
        - peco
      unarchive:
        src: /tmp/peco.tar.gz
        dest: /tmp

    - name: Move peco executable into PATH
      tags:
        - peco
      copy:
        src: /tmp/peco_linux_amd64/peco
        dest: ~/bin/peco

    - name: Make peco executable
      tags:
        - peco
      file:
        path: ~/bin/peco
        mode: a+x

    - name: Clone Fasd Repo
      git:
        repo: https://github.com/clvv/fasd.git
        dest: /tmp/fasd

    - name: Install Fasd
      become: yes
      make: 
        chdir: /tmp/fasd
        target: install

    - name: Add devtools directory to path
      lineinfile:
        dest: "{{ item.path }}"
        line: "export DEV={{ dev_dir }}"
        create: "{{ item.create }}"
      with_items:
        - { path: ~/.oh-my-zsh/custom/custom_env.zsh, create: true }
        - { path: ~/.xsessionrc, create: false }

    - name: Install jEnv
      tags: jenv
      git:
        repo: https://github.com/gcuisinier/jenv.git
        dest: ~/.jenv

    - name: Download Volta installer (Javascript tools version manager
      tags:
        - volta
      get_url:
        url: https://get.volta.sh
        dest: /tmp/volta.sh

    - name: Install Volta
      tags:
        - volta
      script: /tmp/volta.sh

    - name: Download JetBrains toolbox
      tags: idea
      get_url:
        url: https://data.services.jetbrains.com/products/download?platform=linux&code=TBA
        dest: /tmp/jetbrains-toolbox.tar.gz

    - name: Prepare Jetbrains directory
      tags: idea
      file:
        path: ~/dev/jetbrains-toolbox
        state: directory

    - name: Install JetBrains toolbox
      tags: idea
      unarchive:
        src: /tmp/jetbrains-toolbox.tar.gz
        dest: ~/dev/jetbrains-toolbox

    - name: Find jetbrains executable
      tags: idea
      find:
        paths: ~/dev/jetbrains-toolbox
        file_type: file
        pattern: jetbrains-toolbox
        use_regex: yes
        recurse: yes
      register: jetbrains_exec_file

    - name: Create link to jetbrains in bin
      tags: idea
      file:
        src: "{{ item.path }}"
        dest: "~/bin/jetbrains-toolbox"
        state: link
      with_items: "{{ jetbrains_exec_file.files }}"

    - name: Modify iBus setting to prevent idea crash https://youtrack.jetbrains.com/issue/IDEA-78860
      lineinfile:
        dest: ~/.xsessionrc
        line: "export IBUS_ENABLE_SYNC_MODE=1"

    - name: Retrieve current maven version
      tags: maven
      uri:
        url: https://maven.apache.org/ref/current/
      register: maven_url_result

    - name: Extract maven version
      tags: maven
      set_fact:
        maven_version: '{{ maven_url_result.url | regex_replace(".*/ref/([0-9.]+)/", "\1") }}'

    - name: Download Maven
      tags:
        - maven
      get_url:
        url: "http://apache.mirrors.ovh.net/ftp.apache.org/dist/maven/maven-3/{{ maven_version }}/binaries/apache-maven-{{ maven_version }}-bin.tar.gz"
        dest: "/tmp/maven-{{ maven_version }}.tar.gz"

    - name: Install Maven
      tags:
        - maven
      unarchive: 
        src: "/tmp/maven-{{ maven_version }}.tar.gz"
        dest: "{{ dev_dir }}"

    - name: Create Sym link to Maven
      tags:
        - maven
      file:
        src: "{{ dev_dir }}/apache-maven-{{ maven_version }}"
        dest: "{{ dev_dir }}/maven"
        state: link

    - name: Copy XmodMap config
      tags: xmodmap
      file:
        src: "{{ script_dir }}/.Xmodmap"
        dest: ~/.Xmodmap
        state: link

    - name: Refresh xmodmap
      tags: xmodmap
      shell:
        cmd: xmodmap ~/.Xmodmap

    - name: Install i3
      become: yes
      tags:
        - i3
      apt:
        name: i3
        state: present

    - name: Mkdir i3 config directory
      tags:
        - i3
      file: 
        path: "~/.config/i3"
        state: directory
        recurse: yes

    - name: Copy i3 config
      tags:
        - i3
      file:
        src: "{{ script_dir }}/i3.conf"
        dest: ~/.config/i3/config
        state: link

    - name: Copy i3 'switch workspace' script
      tags:
        - i3
      file:
        src: "{{ script_dir }}/i3/switch-workspace.py"
        dest: ~/.config/i3/switch-workspace.py
        state: link

    - name: Copy my3status config files
      tags:
        - i3
        - my3status
      file:
        src: "{{ script_dir }}/my3status-java"
        dest: ~/.config/my3status
        state: link

    - name: Download GraalVM (Java VM to build native applications)
      tags:
        - i3
        - my3status
      get_url:
        url: https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.3.2/graalvm-ce-java17-linux-amd64-22.3.2.tar.gz
        dest: "/tmp/graalvm-java17.tar.gz"
    - name: Extract GraalVM (Java VM to build native applications)
      tags:
        - i3
        - my3status
      unarchive:
        src: "/tmp/graalvm-java17.tar.gz"
        dest: "{{ dev_dir }}"
    - name: Add GraalVM in jenv
      tags:
        - i3
        - my3status
      shell:
        cmd: "jenv add {{ dev_dir }}/graalvm-ce-java17-22.3.2"

    - name: Add apt-key for yarn
      become: yes
      apt_key:
        url: https://dl.yarnpkg.com/debian/pubkey.gpg

    - name: Add Yarn repo into sources list
      become: yes
      apt_repository:
        repo: "deb https://dl.yarnpkg.com/debian/ stable main"
        state: present
        update_cache: yes

    - name: Install yarn
      become: yes
      apt:
        name: yarn
        state: present

    - name: Add apt-key for Docker
      tags:
        - docker
      become: yes
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg

    - name: Add Docker repo into sources list
      tags:
        - docker
      become: yes
      apt_repository:
        repo: "deb https://download.docker.com/linux/ubuntu {{ lsb_release.stdout }} stable"
        state: present
        update_cache: yes

    - name: Install Docker Engine
      tags:
        - docker
      become: yes
      apt:
        name: ['docker-ce', 'docker-ce-cli', 'containerd.io']
        state: present

    - name: Ensure group "docker" exists
      tags:
        - docker
      become: yes
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add my user to docker group
      tags:
        - docker
      become: yes
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: yes

    - name: Retrieve last release of docker-compose
      tags:
        - docker
      get_url:
        url: "https://api.github.com/repos/docker/compose/releases/latest"
        force: yes
        headers:
          Accept: "application/vnd.github.v3+json"
        dest: "/tmp/docker-compose-releases.json"

    - name: Register docker-compose last release in ansible variable
      tags:
        - docker
      shell: cat "/tmp/docker-compose-releases.json" | jq '.name' | sed -e 's/^"//' -e 's/"$//'
      register: "docker_compose_last_release"

    - name: Retrieve current docker-compose version
      tags:
        - docker
      shell: docker-compose --version --short
      register: "docker_compose_current_release"
      ignore_errors: yes # do not fail ansible playbook if docker-compose does not exist yet

    - name: Get docker-compose download url
      tags:
        - docker
      shell: |
        cat "/tmp/docker-compose-releases.json" | jq '.assets | .[] | select(.browser_download_url | test("{{ uname_s.stdout | lower }}-{{ uname_m.stdout | lower }}$")) | .browser_download_url' | sed -e 's/^"//' -e 's/"$//'
      register: "download_url"
      when: "docker_compose_last_release.stdout != docker_compose_current_release.stdout"

    - name: Download Docker-compose
      tags:
        - docker
      get_url:
        url: "{{ download_url.stdout }}"
        dest: "~/bin/docker-compose"
        mode: 0755
        force: true
      when: "docker_compose_last_release.stdout != docker_compose_current_release.stdout"

    - name: Add apt-key for Vault
      tags:
        - vault
      become: yes
      apt_key:
        url: https://apt.releases.hashicorp.com/gpg

    - name: Add Vault repo into sources list
      tags:
        - vault
      become: yes
      apt_repository:
        repo: "deb [arch=amd64] https://apt.releases.hashicorp.com {{ lsb_release.stdout }} main"
        state: present
        update_cache: yes

    - name: Install Vault
      tags:
        - vault
      become: yes
      apt:
        name: vault
        state: present

    - name: Retrieve last kubectl version
      tags: kubectl
      uri:
        url: https://storage.googleapis.com/kubernetes-release/release/stable.txt
        method: GET
        return_content: true
      register: kubectl_last_version

    - name: Install kubectl
      tags: kubectl
      get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/{{ kubectl_last_version.content }}/bin/linux/amd64/kubectl
        dest: ~/bin/kubectl
        mode: 0755

    - name: Download Teleport CLI (tsh) install script
      tags:
        - tsh
      get_url:
        url: https://goteleport.com/static/install.sh
        dest: /tmp/teleport.sh

    - name: Install Teleport CLI (tsh)
      tags:
        - tsh
      script: /tmp/teleport.sh {{ teleport_version }}
      become: yes

    - name: Retrieve current AWS cli version
      tags: aws
      shell: aws --version
      register: awscli_version_result
      ignore_errors: yes # do not fail ansible playbook if GO does not exist yet

    - name: Download aws cli
      tags:
        - aws
      get_url:
        url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        dest: /tmp/awscli.zip
      # task is only run when AWS is not installed yet. OR when adding 'force' in tags: ansible-playbook local.yml --tags aws,force --ask-become-pass
      # I cannot managed to retrieve the latest version available
      when: "'aws-cli' not in awscli_version_result.stdout or 'force' in ansible_run_tags"

    - name: Unzip aws cli
      tags:
        - aws
      unarchive:
        src: /tmp/awscli.zip
        dest: /tmp
      when: "'aws-cli' not in awscli_version_result.stdout or 'force' in ansible_run_tags"

    - name: Install aws cli
      tags:
        - aws
      become: yes
      shell: /tmp/aws/install -i /usr/local/aws-cli -b /usr/local/bin --update
      when: "'aws-cli' not in awscli_version_result.stdout or 'force' in ansible_run_tags"

    - name: Retrieve last aws-vault download url
      tags: aws
      uri:
        url: https://api.github.com/repos/99designs/aws-vault/releases/latest
        body_format: json
      register: aws_download_url

    - name: Download Aws-Vault
      tags: aws
      get_url:
        url: "{{ item.browser_download_url }}"
        dest: ~/bin/aws-vault
        mode: 0755
        force: yes
      when: "item.name == 'aws-vault-linux-amd64'"
      with_items: "{{ aws_download_url.json.assets }}"

    - name: Retrieve current GO version
      tags:
        - golang
      shell: go version
      register: "GO_current_release"
      ignore_errors: yes # do not fail ansible playbook if GO does not exist yet

    - name: Download GO
      tags:
        - golang
      get_url:
        url: "https://golang.org/dl/go{{ golang_version }}.linux-amd64.tar.gz"
        dest: /tmp/go.tar.gz
      when: "golang_version not in GO_current_release.stdout"

    # avoid conflict between maybe previous version and the one we are trying to install
    - name: Make sure target directory does not exist
      tags:
        - golang
      become: yes
      file:
        path: "/usr/local/go"
        state: absent
      when: "golang_version not in GO_current_release.stdout"

    - name: Extract GO
      tags:
        - golang
      become: yes
      unarchive:
        src: /tmp/go.tar.gz
        dest: "/usr/local"
        creates:
      when: "golang_version not in GO_current_release.stdout"

    - name: Install Flameshot (Screenshot tool)
      become: yes
      apt:
        name: flameshot
        state: present

    - name: Install Peek (screen recorder)
      become: yes
      apt:
        name: peek
        state: present

    - name: Install some usefull tools
      become: yes
      apt:
        name: ['libxml2-utils', 'ack-grep', 'htop', 'scrot', 'curl', 'xautolock']
        state: present

    - name: Retrieve last btop download url
      tags: btop
      uri:
        url: https://api.github.com/repos/aristocratos/btop/releases/latest
        body_format: json
      register: btop_download_url

    - name: Download Btop
      tags: btop
      get_url:
        url: "{{ item.browser_download_url }}"
        dest: /tmp/btop.tgz
        mode: 0755
        force: yes
      when: "{{ item.name == 'btop-x86_64-linux-musl.tbz' }}"
      with_items: "{{ btop_download_url.json.assets }}"

    - name: Prepare Btop working directory
      tags: btop
      file:
        path: /tmp/btop
        state: directory

    - name: Unarchive btop
      tags: btop
      unarchive:
        src: /tmp/btop.tgz
        dest: /tmp/btop

    - name: Install btop
      tags: btop
      become: yes
      make:
        chdir: /tmp/btop
        target: install

    - name: Install gimp
      become: yes
      apt:
        name: 'gimp'
        state: present

    - name: Install Xournal (PDF editor)
      become: yes
      apt: 
        name: xournal
        state: present


    - name: Install TLDR
      become: yes
      pip:
        name: tldr
        state: present

    - name: Install NCDU (disk usage analyser)
      become: yes
      apt:
        name: ncdu
        state: present

    - name: Install Ssh shuttle (needed by tools-remote)
      tags: sshuttle
      become: yes
      apt:
        name: sshuttle
        state: present

    - name: Install network tools (netstat)
      become: yes
      apt:
        name: net-tools
        state: present

    - name: Install GraphViz (UML diagrams)
      become: yes
      apt:
        name: graphviz
        state: present

    - name: Create Download directory in xsession
      tags: downloads
      lineinfile:
        dest: ~/.xsessionrc
        line: "mkdir -p /tmp/Downloads"

    - name: Create link to Download directory
      tags: downloads
      file:
        src: "/tmp/Downloads"
        dest: ~/Downloads
        state: link

    - name: Create Screenshots directory in xsession
      tags: downloads
      lineinfile:
        dest: ~/.xsessionrc
        line: "mkdir -p /tmp/screenshots"

    - name: Create link to Screenshots directory
      tags: downloads
      file:
        src: "/tmp/screenshots"
        dest: ~/Images/screenshots
        state: link

    - name: Add tool displaying network status in trayer in xsession
      lineinfile:
        dest: ~/.xsessionrc
        line: "nm-applet &"

    - name: Download Postman
      tags: postman
      command: curl -o /tmp/postman.tar.gz https://dl.pstmn.io/download/latest/linux64

    - name: Extract Postman archive
      tags: postman
      unarchive:
        src: /tmp/postman.tar.gz
        dest: "{{ dev_dir}}"

    - name: Add Postman in PATH
      tags: postman
      file:
        src: "{{ dev_dir}}/Postman/Postman"
        dest: ~/bin/Postman
        state: link

    - name: Install Postgresql
      tags: psql
      become: yes
      apt:
        name: ['postgresql', 'postgresql-client']
        state: present

    - name: Install Emoji font
      become: yes
      apt:
        name: ['ttf-ancient-fonts', 'fonts-powerline']
        state: present

    - name: Allow everyone to check for updates
      become: yes
      blockinfile:
        path: /etc/sudoers
        state: present
        block: |
          Cmnd_Alias UPDATE_OS = {{script_dir}}/checkupdates.sh
          ALL ALL = NOPASSWD:UPDATE_OS
        validate: '/usr/sbin/visudo -cf %s'

  post_tasks:
    - name: Print jenv command
      tags: jenv
      debug:
        msg: "jenv installed. Run: 'jenv enable-plugin maven' to enjoy it"

    - name: Print Docker refresh command
      tags: docker
      debug:
        msg: "Refresh user groups with 'newgrp docker' to run Docker without sudo"
