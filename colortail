#! /usr/bin/env ruby

if(ARGV.length < 2)
  prog_name = File.basename($0)
  puts "Tail le fichier en mettant en valeur le(s) pattern(s)"

  puts "\n%s <fichier> <pattern>" % prog_name
  puts "\t=>%s <fichier> - yellow <pattern>" % prog_name

  puts "\n%s <fichier> -[bl] color pattern" % prog_name
  puts "\t-b : background"
  puts "\t-l : ligne entiere"
  puts "\tLes options sont cumulables. Si aucune n'est specifiee ('- color pattern'), la couleur est utilisee pour le texte"
  puts "\tExemples : %s file.txt - blue alice -bl red bob" % prog_name
  puts "\t\t=>les occurences de 'alice' seront affichees en bleu"
  puts "\t\t=>les lignes contenant bob seront sur fond rouge"
  abort
end

$filename = ARGV[0]

ARGV.shift

def get_sed(pattern, color_code)
  return "s#%s#\x1b[%dm&\x1b[0m#" % [ pattern, color_code ]
end

$sed_command = ""
if(ARGV.length == 1)
  #simple pattern
  $sed_command= get_sed(ARGV[0], 33)
else
  color_map = {
    "yellow" => 33,
    "red" => 31,
    "green" => 32,
    "blue" => 34,
    "magenta" => 35,
    "cyan" => 36
  }

  liste_sed = []
  while (ARGV.length >= 3)
    highlight_type = ARGV[0]
    color_name = ARGV[1]
    pattern = ARGV[2]


    if(color_map.has_key?(color_name))
      color = color_map[color_name]
    else
      abort("Couleur non reconnue : %s" % color_name)
    end

    # match whole line
    if(highlight_type.include?('l'))
       pattern = ".*%s.*" % pattern
    end

    # highlight with background color
    if(highlight_type.include?('b'))
       color += 10
    end


    sed = get_sed(pattern, color)
    liste_sed << sed


    ARGV.shift(3)
  end

  $sed_command = liste_sed * "; "

end

command = "tail -f %s | sed \"%s\"" % [ $filename, $sed_command ]
system(command)

